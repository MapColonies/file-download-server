---
# Source: files-server/charts/nginx/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-nginx-base-configmap
data:
  default.conf: "server {\n    listen 8080;\n    server_name  localhost;\n\n    location / {\n        set $original_method $request_method;\n        set $original_args $args;\n\n        \n        set $domain example;\n        auth_request /_validate_jwt;\n        \n\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    \n    location = /_validate_jwt {\n      internal;\n\n      js_content auth.opaAuth;\n    }\n\n    location = /opa {\n      internal;\n\n      proxy_set_header Content-Type application/json;\n      proxy_pass http://localhost:8181/v1/data/http/authz/decision;\n    }    \n    \n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n"
  nginx.conf: "#user  nginx;\nload_module /otel/otel_ngx_module.so;\nload_module modules/ngx_http_js_module.so;\nworker_processes  4;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /tmp/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    opentelemetry_config /otel/otel-nginx.toml;\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    \n    js_import auth from /etc/nginx/auth.js;\n    js_set $jwt_payload_sub auth.jwtPayloadSub;\n    \n\n    include /etc/nginx/log_format.conf;\n    \n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n"
  log_format.conf: "map $msec $nanosec {\n    ~(.*)\\.(.*) $1$2000000;\n}\n\nlog_format main escape=json \n'{'\n    '\"Timestamp\":$nanosec,'\n    '\"Attributes\":{'\n        '\"mapcolonies.time_local\":\"$time_local\",'\n        \n        '\"mapcolonies.http.auth.token.client_name\":\"$jwt_payload_sub\",'\n        \n        '\"http.request.method\":\"$request_method\",'\n        '\"http.request.header.referer\":\"$http_referer\",'\n        '\"http.request.body.size\":$content_length,'\n        '\"http.response.body.size\":$body_bytes_sent,'\n        '\"http.response.header.x_forwarded_for\":\"$proxy_add_x_forwarded_for\"'\n        '\"http.response.status_code\":$status,'\n        '\"user_agent.original\":\"$http_user_agent\",'\n        '\"network.protocol\":\"$server_protocol\",'\n        '\"mapcolonies.request_time\":$request_time,'\n        '\"mapcolonies.http.upstream_connect_time\":$upstream_connect_time,'\n        '\"mapcolonies.http.upstream_response_time\":$upstream_response_time,'\n        '\"mapcolonies.http.upstream_addr\":\"$upstream_addr\",'\n        '\"mapcolonies.http.upstream_status_code\":$upstream_status,'\n        '\"mapcolonies.http.upstream_cache_status\":\"$upstream_cache_status\",'\n        '\"mapcolonies.server\":\"$hostname\",'\n        '\"server.address\":\"$host\",'\n        '\"server.port\":$server_port,'\n        '\"client.address\":\"$remote_addr\",'\n        '\"client.port\":$remote_port,'\n        '\"url.scheme\":\"$scheme\",'\n        '\"url.path\":\"$uri\",'\n        '\"url.full\":\"$request_uri\",'\n    '},'\n    '\"Resource\":{'\n        # Additional important log details should be added here\n        '\"service.name\":\"nginx-otel-unprivileged\",'\n        '\"service.version\":\"v1.0.0\"'\n    '},'\n    '\"TraceId\":\"$opentelemetry_trace_id\",' ## this is a byte sequence (hex-encoded in JSON)\n    '\"SpanId\":\"$opentelemetry_span_id\",'\n    '\"SeverityText\":\"INFO\",'\n    '\"SeverityNumber\":9,'\n    '\"InstrumentationScope\":\"access.log\",'\n    '\"Body\":\"$request\"'\n'}';\n"
---
# Source: files-server/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-files-server-configmap
  labels:
    app: files-server
    component: files-server-configmap
    environment: development
    release: test
data:
  NGINX_DOWNLOADS_CONFIG: "server {\n    listen       8080;\n    server_name  localhost;\n\n    location /downloads/ {\n        root   /usr/share/nginx/html/downloads;\n        types {}\n    }\n\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n}\n"
  NGINX_ROOT_CONFIG: "load_module /otel/otel_ngx_module.so;\nload_module modules/ngx_http_js_module.so;\n\n#user  nginx;\nworker_processes  4;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    opentelemetry_config /otel/otel-nginx.toml;\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format json escape=json\n    '{'\n        '\"Attributes\": {'\n            '\"time_local\": \"$time_local\",'\n            '\"http.status_code\": $status,'\n            '\"http.url\": \"$http_referer\",'\n            '\"http.x_forwarded_for\": \"$http_x_forwarded_for\",'\n            '\"http.proxy_add_x_forwarded_for\": \"$proxy_add_x_forwarded_for\",'\n            '\"http.user_agent\": \"$http_user_agent\",'\n            '\"http.request_time\": $request_time,'\n            '\"request_length\": \"$request_length\",'\n            '\"http.host\": \"$host\",'\n            '\"upstream_addr\": \"$upstream_addr\",'\n            '\"upstream_status\": \"$upstream_status\",'\n            '\"upstream_connect_time\": \"$upstream_connect_time\",'\n            '\"upstream_header_time\": \"$upstream_header_time\",'\n            '\"upstream_response_time\": \"$upstream_response_time\",'\n            '\"upstream_response_length\": \"$upstream_response_length\",'\n            '\"upstream_bytes_sent\": \"$upstream_bytes_sent\",'\n            '\"upstream_bytes_received\": \"$upstream_bytes_received\",'\n            '\"upstream_http_name\": \"$upstream_http_name\",'\n            '\"bytes_sent\": \"$bytes_sent\",'\n            '\"body_bytes_sent\": \"$body_bytes_sent\",'\n            '\"content_type\":\"$content_type\",'\n            '\"content_length\":\"$content_length\",'\n            '\"remote_addr\": \"$remote_addr\",'\n            '\"remote_port\": \"$remote_port\",'\n            '\"remote_user\": \"$remote_user\",'\n            '\"connection\":\"$connection\",'\n            '\"cache_status\":\"$upstream_cache_status\",'\n            '\"connection_requests\": \"$connection_requests\",'\n            '\"connections_active\": \"$connections_active\",'\n            '\"connections_reading\": \"$connections_reading\",'\n            '\"connections_writing\": \"$connections_writing\",'\n            '\"connections_waiting\": \"$connections_waiting\",'\n            '\"ancient_browser\": \"$ancient_browser\",'\n            '\"modern_browser\": \"$modern_browser\",'\n            '\"binary_remote_addr\": \"$binary_remote_addr\",'\n            '\"hostname\": \"$hostname\",'\n            '\"http_name\": \"$http_name\",'\n            '\"pid\": \"$pid\",'\n            '\"proxy_protocol_addr\": \"$proxy_protocol_addr\",'\n            '\"proxy_protocol_port\": \"$proxy_protocol_port\",'\n            '\"proxy_protocol_server_addr\": \"$proxy_protocol_server_addr\",'\n            '\"proxy_protocol_server_port\": \"$proxy_protocol_server_port\",'\n            '\"proxy_host\": \"$proxy_host\",'\n            '\"proxy_port\": \"$proxy_port\",'\n            '\"realip_remote_addr\": \"$realip_remote_addr\",'\n            '\"realip_remote_port\": \"$realip_remote_port\",'\n            '\"realpath_root\": \"$realpath_root\",'\n            '\"server_name\": \"$server_name\",'\n            '\"server_addr \": \"$server_addr \",'\n            '\"server_port\": \"$server_port\",'\n            '\"server_protocol\": \"$server_protocol\",'\n            '\"ssl_client_serial\": \"$ssl_client_serial\",'\n            '\"ssl_client_fingerprint\": \"$ssl_client_fingerprint\",'\n            '\"ssl_client_i_dn\": \"$ssl_client_i_dn\",'\n            '\"ssl_client_i_dn_legacy\": \"$ssl_client_i_dn_legacy\",'\n            '\"ssl_client_s_dn\": \"$ssl_client_s_dn\",'\n            '\"ssl_client_s_dn_legacy\": \"$ssl_client_s_dn_legacy\",'\n            '\"ssl_session_id\": \"$ssl_session_id\",'\n            '\"ssl_session_reused\": \"$ssl_session_reused\",'\n            '\"tcpinfo_rtt\": \"$tcpinfo_rtt\",'\n            '\"tcpinfo_rttvar\": \"$tcpinfo_rttvar\",'\n            '\"tcpinfo_snd_cwnd\": \"$tcpinfo_snd_cwnd\",'\n            '\"tcpinfo_rcv_space\": \"$tcpinfo_rcv_space\",'\n            '\"uid_got\": \"$uid_got\",'\n            '\"uid_reset\": \"$uid_reset\",'\n            '\"uid_set\": \"$uid_set\"'\n        '},'\n        #'\"TraceId\": \"$opentelemetry_trace_id\",' ## this is a byte sequence (hex-encoded in JSON)\n        #'\"SpanId\": \"$opentelemetry_span_id\",'\n        '\"SeverityText\": \"INFO\",'\n        '\"SeverityNumber\": 9,'\n        '\"RequestBody\": \"$request_body\",'\n        '\"Body\": \"$request\"'\n    '}';\n\n    access_log /var/log/nginx/access.log json;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n"
---
# Source: files-server/templates/nginx/nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-files-server-nginx-configmap
  labels:
    app: test-files-server
    component: nginx-configmap
    environment: development
    release: test
data:
  default.conf: ""
  nginx.conf: ""
  log_format.conf: ""
---
# Source: files-server/charts/nginx/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-nginx-service
  labels:
    app: "test-nginx"
    component: nginx-service
    environment: development
    release: test
spec:
  # In case cloudProavider=azure
  # In case cloudProvider=minikube
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: nginx
  selector:
    app: "test-nginx"
    release: test
    run: test-nginx
---
# Source: files-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-files-server-service
  labels:
    app: files-server
    component: files-server
    environment: development
    release: test
    helm.sh/chart: files-server-2.0.4
    app.kubernetes.io/name: files-server
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  selector:
    app: files-server
    release: test
    run: test-files-server
    app.kubernetes.io/name: files-server
    app.kubernetes.io/instance: test
---
# Source: files-server/charts/nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-nginx-deployment
  labels:
    app: "test-nginx"
    component: nginx-deployment
    environment: development
    release: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "test-nginx"
      release: test
      run: test-nginx
  template:
    metadata:
      labels:
        app: "test-nginx"
        release: test
        run: test-nginx
      annotations:
    spec:
      imagePullSecrets:
        - name: "acr-registry"
      volumes:
        - name: nginx-base-config
          configMap:
            name: test-nginx-base-configmap

        - configMap:
            name: "test-files-server-nginx-configmap"
          name: nginx-config
      containers:
        - name: nginx-container
          image: acrarolibotnonprod.azurecr.io/nginx-otel-unprivileged:v1.0.0
          imagePullPolicy: Always
          env:
            - name: OTEL_SERVICE_NAME
              value: "nginx"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "localhost:4317"
            - name: OTEL_TRACES_SAMPELR
              value: "AlwaysOff"
            - name: OTEL_TRACES_SAMPLER_RATIO
              value: "0.1"
            - name: OTEL_TRACES_SAMPLER_PARENT_BASED
              value: "false"
          volumeMounts:
            - name: nginx-base-config
              mountPath: "/etc/nginx/nginx.conf"
              subPath: nginx.conf
            - name: nginx-base-config
              mountPath: "/etc/nginx/log_format.conf"
              subPath: log_format.conf

            - mountPath: /etc/nginx/conf.d/default.conf
              name: nginx-config
              subPath: default.conf
            - mountPath: /etc/nginx/downloads.conf
              name: nginx-config
              subPath: downloads.conf
            - mountPath: /etc/nginx/nginx_root.conf
              name: nginx-config
              subPath: nginx_root.conf
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            httpGet:
              path: /nginx_status
              port: 8081
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: files-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-files-server-deployment
  labels:
    app: files-server
    component: files-server
    environment: development
    release: test
    helm.sh/chart: files-server-2.0.4
    app.kubernetes.io/name: files-server
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: files-server
      release: test
      run: test-files-server
      app.kubernetes.io/name: files-server
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        app: files-server
        release: test
        run: test-files-server
        app.kubernetes.io/name: files-server
        app.kubernetes.io/instance: test
      annotations:
        checksum/configmap: c4d82ab4f90d3e92823e10ab35b1f175bdeb40094bb1a884dd7ffe4b83a3186b

    spec:
      imagePullSecrets:
        - name: "acr-registry"
      containers:
        ### file downloader container ###
        - name: files-server
          image: acrarolibotnonprod.azurecr.io/files-server:latest
          env:
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:55681/v1/trace
          ports:
            - name: external
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /nginx_status
              port: 8081
          volumeMounts:
            - mountPath: "/etc/nginx/conf.d/downloads.conf"
              name: nginx-downloads-config
              subPath: downloads.conf
              readOnly: true
            - mountPath: "/etc/nginx/nginx.conf"
              name: nginx-root-config
              subPath: nginx.conf
              readOnly: true
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: nginx-downloads-config
          configMap:
            name: test-files-server-configmap
            items:
              - key: "NGINX_DOWNLOADS_CONFIG"
                path: "downloads.conf"
        - name: nginx-root-config
          configMap:
            name: test-files-server-configmap
            items:
              - key: "NGINX_ROOT_CONFIG"
                path: "nginx.conf"
---
# Source: files-server/charts/nginx/templates/route.yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: test-nginx-route
  annotations:
spec:
  path: /api/raster/v1
  port:
    targetPort: nginx
  to:
    kind: Service
    name: test-nginx-service
  tls:
    termination: "edge"
    insecureEdgeTerminationPolicy: "Redirect"
